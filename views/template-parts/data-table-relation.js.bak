module.exports = async (model, data) => {

	let inflector = require("../../helper/inflector");
	let valueFormat = require("../../helper/view/value-format")
	let primaryKey = model.primaryKey;
	let _ = require("lodash");
	let instance = Math.round(Math.random() * 10000);
	data = data || [];

	let keys = _.filter(model.fields.adminIndex, {visible: true});
	keys = _.map(keys, "property");

	/**
	 * @param {array} keys
	 * @returns {string}
	 */
	let header = (keys) => {
		let items = [];
		keys.forEach(function (property) {
			if (!property) {
				return;
			}
			items.push(
				`<div class="col-1 border-right border-top p-1">${inflector.classify(inflector.underscore(property))}</div>`
			)
		});
		return items.join("");
	}

	/**
	 * @param {array} row
	 * @param {array} keys
	 * @returns {string}
	 */
	let columns = (row, keys) => {
		let items = [];
		keys.forEach(function (property) {
			if (!property) {
				return;
			}
			let name;
			//console.log(row.foreignKeys);
			if (row.foreignKeys && row.foreignKeys[property] && row.foreignKeys[property].name) {
				name = row.foreignKeys[property].name
			}
			items.push(
				`<div class="col-1 p-1 border-right">
					${ valueFormat(model, property, row[property], name) }
				</div>`
			);
		});
		return items.join("");
	}

	/**
	 * @param {array} keys
	 * @returns {string}
	 */
	let rows = (keys) => {
		let html = "";
		let count = 0;
		let type = "";
		data.forEach(
			(row) => {
				let primaryKeyValue;
				if (_.isArray(primaryKey)) {
					primaryKeyValue = [];
					primaryKey.forEach(
						(k) => {
							primaryKeyValue.push(row[k]);
						}
					)
					primaryKeyValue = primaryKeyValue.join("|");
				} else {
					primaryKeyValue = row[model.primaryKey]
				}

				html += `<div class="row m-0 border-top row-striped" data-row-id="${primaryKeyValue}" data-bindid="view">`
				html += columns(row, keys);
				html += actions(primaryKeyValue);
				html += "</div>";
				count++;

			}
		)
		return html;
	}

	let actions = (primaryKeyValue) => {
		return `
		<div class="col-1 p-1 actions td-actions text-right">
			<button class="btn btn-link edit" data-bindid="edit" data-row-id="${primaryKeyValue}">
				<i class="material-icons">edit</i>
			</button>
			<button class="btn btn-link delete" data-bindid="delete" data-row-id="${primaryKeyValue}">
				<i class="material-icons">close</i>
			</button>
		</div>
		`
	}

	return `
<div class="mb-4" style="position: relative">
	<div id="table_${ instance }" class="container-fluid gridded gridded-inline gridded-relation">
		<div class="inner" style="min-width:100%;position: absolute">
			<div class="row header m-0">
				${header(keys)}
				<div class="col-1 border-top text-right p-1 actions">Actions</div>
			</div>
			${rows(keys)}
		</div>
	</div>
	<style>
		#table_${ instance } .col-1 {
			min-width: ${ keys.length <= 8 ? 100 / (keys.length + 1) + "%" : '150px'} !important;
			max-width: ${ keys.length <= 8 ? 100 / (keys.length + 1) + "%" : '150px'} !important;
			float: left;
			overflow: hidden;
			white-space: nowrap;
			text-overflow: ellipsis;
		}
	</style>
</div>`
}
