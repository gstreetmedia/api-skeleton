const _ = require("lodash");

module.exports = (o) => {
	let name = o.name;
	let model = o.model;
	let data = o.data;
	let query = o.query;
	let primaryKey = model.primaryKey;
	delete query.select;
	delete query.join;

	let sortList = typeof query.sort == "string" ? query.sort.split(",") : [];
	let sort = {};
	sortList.forEach(
		(item) => {
			let parts = item.split(" ");
			sort[parts[0]] = parts[1];
		}
	)

	let inflector = require("../../helper/inflector");
	let valueFormat = require("../../helper/view/value-format")

	let _ = require("lodash");

	/**
	 * @param {array} keys
	 * @returns {string}
	 */
	let header = (keys) => {
		let items = [];
		keys.forEach(function (property) {
			if (!property) {
				return;
			}
			let q = _.clone(query);
			let iconName = 'arrow_drop_down';
			if (sort[property]) {
				q.sort = property + " " + (sort[property] === "ASC" ? "DESC" : "ASC");
				iconName = sort[property] === "ASC" ? "arrow_drop_up" : "arrow_drop_down";
			} else {
				q.sort = property + " DESC";
			}

			let link = JSON.stringify(q).split('"').join('&quot;')
			let icon = `<span class="material-icons-outlined">${iconName}</span>`;

			items.push(
				`<div class="col-1 border-right border-top p-1">
					<a href="/admin/${o.model.tableName}?query=${link}" class="order d-block float-right">
						<span class="material-icons">
							${icon}
						</span>
					</a>
					<span class="name d-block float-left">${property}</span>
				 </div>`
			)
		});
		return items.join("");
	}

	/**
	 * @param {array} row
	 * @param {array} keys
	 * @returns {string}
	 */
	let columns = (row, keys) => {
		let items = [];
		keys.forEach(
			(key) => {
				if (!key) {
					return;
				}
				let name;
				//console.log(row.foreignKeys);
				if (row.foreignKeys && row.foreignKeys[key] && row.foreignKeys[key].name) {
					name = row.foreignKeys[key].name
				}

				let value = key.indexOf(".") !== -1 ? _.get(row, key) : row[key];


				items.push(
					`<div class="col-1 p-1 border-right">
					${valueFormat(model, key, value, name)}
				</div>`
				);
			});
		return items.join("");
	}

	/**
	 * @param {array} keys
	 * @returns {string}
	 */
	let rows = (keys) => {
		let html = "";
		let count = 0;
		let type = "";
		data.forEach(
			(row) => {
				let primaryKeyValue;
				if (_.isArray(primaryKey)) {
					primaryKeyValue = [];
					primaryKey.forEach(
						(k) => {
							primaryKeyValue.push(row[k]);
						}
					)
					primaryKeyValue = primaryKeyValue.join("|");
				} else {
					primaryKeyValue = row[model.primaryKey]
				}

				html += `<div class="row m-0 border-top row-striped" data-row-id="${primaryKeyValue}" data-bindid="view">`
				html += columns(row, keys);
				html += actions(primaryKeyValue);
				html += "</div>";
				count++;

			}
		)
		return html;
	}

	let actions = (primaryKeyValue) => {
		return `
		<div class="col-1 p-1 actions td-actions text-right">
			<button class="btn btn-link edit" data-bindid="edit" data-row-id="${primaryKeyValue}">
				<i class="material-icons">edit</i>
			</button>
			<button class="btn btn-link delete" data-bindid="delete" data-row-id="${primaryKeyValue}">
				<i class="material-icons">close</i>
			</button>
		</div>
		`
	}

	if (data.length > 0) {
		let instance = new Date().getTime();
		let keys = model.fields.adminIndex || Object.keys(data[0]);
		keys = _.filter(keys, {visible: true});
		keys = _.map(keys, "property");
		return `

	<div id="table_${instance}" class="container-fluid gridded">
		<div style="width:${keys.length <= 8 ? "100%;margin-right:17px;" : (keys.length + 1) * 150 + "px"};min-width:100%;position: absolute;">
			<div class="row header m-0">
				${header(keys)}
				<div class="col-1 border-top text-right p-1">Actions</div>
			</div>
			${rows(keys)}
		</div>
	</div>

	<style>
		#table_${instance} .col-1 {
		min-width: ${keys.length <= 8 ? 100 / (keys.length + 1) + "%" : '150px'} !important;
		max-width: ${keys.length <= 8 ? 100 / (keys.length + 1) + "%" : '150px'} !important;
		float: left;
		overflow: hidden;
		white-space: nowrap;
		text-overflow: ellipsis;
	}
	</style>
	`
	} else {
		return `
	<div class="row p-4">
		<div class="col">
			<strong>No ${inflector.pluralize(o.model.schema.title)} Yet</strong><br/>
			<a href="/admin/${o.model.tableName}/create" class="d-none">Create your first</a>
		</div>
	</div>`
	}

}
